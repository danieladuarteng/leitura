{"version":3,"sources":["LeituraAPI.js","actions/posts.js","actions/shared.js","components/PostsList.js","components/Header.js","components/Home.js","components/UpdatePost.js","components/CommentsList.js","components/Page404.js","components/PostDetails.js","components/NewPost.js","components/UpdateComment.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/posts.js","reducers/post.js","reducers/categories.js","middleware/logger.js","middleware/index.js","index.js"],"names":["api","headers","Accept","Authorization","Content-Type","getAllPosts","fetch","concat","method","then","res","json","data","catch","error","console","log","getAllCategories","getPostsForCategories","name","getPostDetails","postId","getCommentsDetails","commentId","getPostComments","createPost","post","body","JSON","stringify","id","Math","random","toString","substr","timestamp","title","author","category","voteScore","deleted","commentCount","voteScorePost","vote","option","voteScoreComment","createComment","parentId","content","editPost","edited","editComment","bodyComment","deletePost","deleteComment","RECEIVE_POSTS","POST_DETAILS","NEW_POST","EDIT_POST","DELETE_POST","TOGGLE_VOTE_SCORE","GET_POST_COMMENTS","NEW_COMMENT","EDIT_COMMENT","DELETE_COMMENT","COMMENT_DETAILS","TOGGLE_VOTE_SCORE_COMMENT","GET_CATEGORIES","GET_POSTS_FOR_CATEGORY","handleInitialData","dispatch","posts","type","receivePosts","handleGetAllCategories","result","categories","handlePostsForCategory","postDetails","receivePostDetails","commentDetails","resp","comment","postComments","comments","receivePostComments","addPost","postContent","e","warn","AddComment","commentContent","handleEditPost","handleEditComment","handleDeletePost","handleDeleteComment","voteScorePostAction","alert","voteScoreCommentAction","PostsList","state","upvote","downvote","handleLike","_this","props","handlePostDetails","history","push","pathname","_this2","this","_this$props$post","_this$props","_this$state","react_default","a","createElement","className","moment","format","onClick","Component","connect","_ref","_ref2","Header","Link","to","Home","categorySelected","sort","setState","onSortBy","target","value","_this$props2","renderForVoteScore","renderForTimestamp","components_Header","map","components_PostsList","key","onChange","Button_default","Object","keys","b","values","UpdatePost","postEdited","toHome","handleChange","event","objectSpread","defineProperty","handleSubmit","preventDefault","match","params","mydata","_this3","classes","_this$state$postEdite","Redirect","container","noValidate","autoComplete","onSubmit","TextField_default","required","placeholder","label","margin","fullWidth","helperText","multiline","rowsMax","variant","color","withStyles","theme","display","flexWrap","textField","marginLeft","spacing","unit","marginRight","width","dense","marginTop","menu","CommentsList","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleComments","get","handleDelete","Date","now","_this$state$comment","InputLabelProps","shrink","Page404","PostDetails","havePost","componentDidMount","_callee","returnDetails","regenerator_default","wrap","_context","prev","next","sent","stop","handleEdit","undefined","components_Page404","components_CommentsList","categoriesList","NewPost","_this$state$post","select","SelectProps","MenuProps","MenuItem_default","UpdateComment","backDetails","HashRouter","Switch","Route","exact","path","component","render","components_Home","Boolean","window","location","hostname","combineReducers","arguments","length","action","filter","item","postVotedId","orderVote","toConsumableArray","updatedComments","newComments","splice","findIndex","logger","store","group","returnValue","getState","groupEnd","applyMiddleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducer","middleware","ReactDOM","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.557ffdca.chunk.js","sourcesContent":["const api = \"http://localhost:3001\";\r\n\r\nconst headers = {\r\n    'Accept': 'application/json',\r\n    'Authorization': 'whatever-you-want',\r\n    'Content-Type': 'application/json',\r\n}\r\n\r\nexport const getAllPosts = () =>\r\n    fetch(`${api}/posts`, {\r\n        method: 'GET',\r\n        headers\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            //console.log('todos os posts')\r\n            //console.log(data)\r\n            return data\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            return error\r\n        })\r\n\r\nexport const getAllCategories = () =>\r\n    fetch(`${api}/categories`, {\r\n        method: 'GET',\r\n        headers\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            //console.log('todas categorias')\r\n            //console.log(data)\r\n            return data\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            return error\r\n        })\r\n\r\n\r\nexport const getPostsForCategories = (name) =>\r\n    fetch(`${api}/${name}/posts`, {\r\n        method: 'GET',\r\n        headers\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            //console.log('posts com categorias',name)\r\n            //console.log(data)\r\n            return data\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            return error\r\n        })\r\n\r\nexport const getPostDetails = (postId) =>\r\n    fetch(`${api}/posts/${postId}`, {\r\n        method: 'GET',\r\n        headers\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            //console.log(\"post com detalhes\", postId)\r\n            //console.log(data)\r\n            return data\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            return error\r\n        })\r\n\r\nexport const getCommentsDetails = (commentId) =>\r\n    fetch(`${api}/comments/${commentId}`, {\r\n        method: 'GET',\r\n        headers\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            console.log(\"comentário com detalhes\", commentId)\r\n            console.log(data)\r\n            return data\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            return error\r\n        })\r\n\r\nexport const getPostComments = (postId) =>\r\n    fetch(`${api}/posts/${postId}/comments`, {\r\n        method: 'GET',\r\n        headers\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            //console.log(\"post com commentários\", postId)\r\n            //console.log(data)\r\n            return data\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            return error\r\n        })\r\n\r\nexport const createPost = (post) =>\r\n    fetch(`${api}/posts`, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({\r\n            id: Math.random().toString(36).substr(-8),\r\n            timestamp: post.timestamp,\r\n            title: post.title,\r\n            body: post.body,\r\n            author: post.author,\r\n            category: post.category,\r\n            voteScore: post.voteScore,\r\n            deleted: post.deleted,\r\n            commentCount: post.commentCount,\r\n        })\r\n    }).then(res => res.json())\r\n        .then(data => {\r\n            //console.log(\"novo post\", post)\r\n            //console.log(data)\r\n            return data\r\n        })\r\n\r\nexport const voteScorePost = (id, vote) =>\r\n    fetch(`${api}/posts/${id}`, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({\r\n            option: vote,\r\n        })\r\n    }).then(res => res.json())\r\n        .then(data => {\r\n            console.log(\"novo voto\", vote)\r\n            console.log(data)\r\n            return data\r\n        })\r\n\r\nexport const voteScoreComment= (id, vote) =>\r\n    fetch(`${api}/comments/${id}`, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({\r\n            option: vote,\r\n        })\r\n    }).then(res => res.json())\r\n        .then(data => {\r\n            console.log(\"novo voto\", vote)\r\n            console.log(data)\r\n            return data\r\n        })\r\n\r\nexport const createComment = (parentId, content) =>\r\n    fetch(`${api}/comments`, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({\r\n            id: Math.random().toString(36).substr(-8),\r\n            timestamp: content.timestamp,\r\n            title: content.title,\r\n            body: content.body,\r\n            author: content.author,\r\n            parentId,\r\n        })\r\n    }).then(res => res.json())\r\n        .then(data => {\r\n            console.log(\"novo comentário\", content)\r\n            console.log(data)\r\n            return data\r\n        })\r\n\r\nexport const editPost = (id, edited) =>\r\n    fetch(`${api}/posts/${id}`, {\r\n        method: 'PUT',\r\n        headers,\r\n        body: JSON.stringify({\r\n            title: edited.title,\r\n            body: edited.body,\r\n        })\r\n    }).then(res => res.json())\r\n        .then(data => {\r\n            console.log(\"post edited\", edited)\r\n            console.log(data)\r\n            return data\r\n        })\r\n\r\nexport const editComment = (id, bodyComment) =>\r\n    fetch(`${api}/comments/${id}`, {\r\n        method: 'PUT',\r\n        headers,\r\n        body: JSON.stringify({\r\n            body: bodyComment,\r\n        })\r\n    }).then(res => res.json())\r\n        .then(data => {\r\n            console.log(\"comment edited\", bodyComment)\r\n            console.log(data)\r\n            return data\r\n        })\r\n\r\nexport const deletePost = id =>\r\n    fetch(`${api}/posts/${id}`, {\r\n        method: 'DELETE',\r\n        headers\r\n    }).then(res => res.json())\r\n        .then(data => {\r\n            console.log(\"post deleted\", id)\r\n            console.log(data)\r\n            return data\r\n        })\r\n\r\nexport const deleteComment = id =>\r\n    fetch(`${api}/comments/${id}`, {\r\n        method: 'DELETE',\r\n        headers,\r\n    }).then(res => res.json())\r\n        .then(data => {\r\n            console.log(\"comment deleted\", id)\r\n            console.log(data)\r\n            return data\r\n        })\r\n\r\nexport default api\r\n","export const RECEIVE_POSTS = 'RECEIVE_POSTS'\r\nexport const POST_DETAILS = 'POST_DETAILS'\r\nexport const NEW_POST = 'NEW_POST'\r\nexport const EDIT_POST = 'EDIT_POST'\r\nexport const DELETE_POST = 'DELETE_POST'\r\nexport const TOGGLE_VOTE_SCORE = 'TOGGLE_VOTE_SCORE'\r\n\r\nexport const GET_POST_COMMENTS = 'GET_POST_COMMENTS'\r\nexport const NEW_COMMENT = 'NEW_COMMENT'\r\nexport const EDIT_COMMENT = 'EDIT_COMMENT'\r\nexport const DELETE_COMMENT = 'DELETE_COMMENT'\r\nexport const COMMENT_DETAILS = 'COMMENT_DETAILS'\r\nexport const TOGGLE_VOTE_SCORE_COMMENT = 'TOGGLE_VOTE_SCORE_COMMENT'\r\n\r\nexport const GET_CATEGORIES = 'GET_CATEGORIES'\r\nexport const GET_POSTS_FOR_CATEGORY = 'GET_POSTS_FOR_CATEGORY'\r\n\r\n\r\nexport function receivePosts(posts) {\r\n    return {\r\n        type: RECEIVE_POSTS,\r\n        posts\r\n    }\r\n}\r\n\r\nexport function receivePostDetails(post) {\r\n    return {\r\n        type: POST_DETAILS,\r\n        post\r\n    }\r\n}\r\n\r\nexport function receiveCommentDetails(comment) {\r\n    return {\r\n        type: COMMENT_DETAILS,\r\n        comment\r\n    }\r\n}\r\n\r\nexport function newPost(post) {\r\n    return {\r\n        type: NEW_POST,\r\n        post,\r\n    }\r\n}\r\n\r\nexport function editPostAction(post) {\r\n    return {\r\n        type: EDIT_POST,\r\n        post,\r\n    }\r\n}\r\n\r\nexport function deletePostAction(post) {\r\n    return {\r\n        type: DELETE_POST,\r\n        post,\r\n    }\r\n}\r\n\r\nexport function deleteCommentAction(comment) {\r\n    return {\r\n        type: DELETE_COMMENT,\r\n        comment,\r\n    }\r\n}\r\n\r\nexport function toggleVoteScore(post) {\r\n    return {\r\n        type: TOGGLE_VOTE_SCORE,\r\n        post,\r\n    }\r\n}\r\n\r\nexport function toggleVoteScoreComment(comment){\r\n    return{\r\n        type: TOGGLE_VOTE_SCORE_COMMENT,\r\n        comment,\r\n    }\r\n}\r\n\r\nexport function receivePostComments(comments) {\r\n    return {\r\n        type: GET_POST_COMMENTS,\r\n        comments,\r\n    }\r\n}\r\n\r\nexport function newComment(comment) {\r\n    return {\r\n        type: NEW_COMMENT,\r\n        comment,\r\n    }\r\n}\r\n\r\nexport function editCommentAction(comment) {\r\n    return {\r\n        type: EDIT_COMMENT,\r\n        comment,\r\n    }\r\n}\r\n\r\nexport function getCategories(categories) {\r\n    return {\r\n        type: GET_CATEGORIES,\r\n        categories,\r\n    }\r\n}\r\n\r\nexport function getPostsForCategory(posts) {\r\n    return {\r\n        type: GET_POSTS_FOR_CATEGORY,\r\n        posts,\r\n    }\r\n}\r\n\r\n","import {\r\n    getAllPosts,\r\n    getPostDetails,\r\n    getPostComments,\r\n    createPost,\r\n    editPost,\r\n    deletePost,\r\n    getAllCategories,\r\n    getPostsForCategories,\r\n    createComment,\r\n    voteScorePost,\r\n    editComment,\r\n    deleteComment,\r\n    getCommentsDetails,\r\n    voteScoreComment,\r\n} from '../LeituraAPI'\r\n\r\nimport {\r\n    receivePosts,\r\n    receivePostDetails,\r\n    receivePostComments,\r\n    newPost,\r\n    editPostAction,\r\n    deletePostAction,\r\n    getCategories,\r\n    getPostsForCategory,\r\n    newComment,\r\n    toggleVoteScore,\r\n    editCommentAction,\r\n    deleteCommentAction,\r\n    receiveCommentDetails,\r\n    toggleVoteScoreComment,\r\n} from './posts'\r\n\r\n\r\nexport function handleInitialData() {\r\n    return (dispatch) => {\r\n        return getAllPosts()\r\n            .then((posts) => {\r\n                dispatch(receivePosts(posts))\r\n            })\r\n    }\r\n}\r\n\r\nexport function handleGetAllCategories() {\r\n    return dispatch => {\r\n        return getAllCategories()\r\n            .then((result) => {\r\n                dispatch(getCategories(result.categories));\r\n            })\r\n    }\r\n}\r\n\r\nexport function handlePostsForCategory(category) {\r\n    return dispatch => {\r\n        return getPostsForCategories(category)\r\n            .then((result) => {\r\n                dispatch(getPostsForCategory(result))\r\n            })\r\n    }\r\n}\r\n\r\nexport function postDetails(id) {\r\n    return (dispatch) => {\r\n        return getPostDetails(id)\r\n            .then(post => {\r\n                dispatch(receivePostDetails(post))\r\n                return post;\r\n            })\r\n    }\r\n}\r\n\r\nexport function commentDetails(id) {\r\n    return (dispatch) => {\r\n        return getCommentsDetails(id)\r\n            .then(resp => {\r\n                dispatch(receiveCommentDetails(resp))\r\n                return resp\r\n            })\r\n    }\r\n}\r\n\r\nexport function postComments(id) {\r\n    return (dispatch) => {\r\n        return getPostComments(id)\r\n            .then(comments => {\r\n                dispatch(receivePostComments(comments))\r\n            })\r\n    }\r\n}\r\n\r\nexport function addPost(post) {\r\n\r\n    const postContent = {\r\n        timestamp: post.timestamp,\r\n        title: post.title,\r\n        body: post.body,\r\n        author: post.author,\r\n        category: post.category,\r\n        voteScore: 1,\r\n        deleted: false,\r\n        commentCount: 0\r\n    }\r\n\r\n    return dispatch => {\r\n        return createPost(postContent)\r\n            .then(resp => dispatch(newPost(resp)))\r\n            .catch(e => {\r\n                console.warn('Error in createPost: ', e)\r\n            })\r\n    }\r\n}\r\n\r\nexport function AddComment(parentId, content) {\r\n    const commentContent = {\r\n        timestamp: content.timestamp,\r\n        body: content.body,\r\n        author: content.author,\r\n    }\r\n\r\n    return dispatch => {\r\n        return createComment(parentId, commentContent)\r\n            .then(resp => dispatch(newComment(resp)))\r\n            .catch(e => {\r\n                console.warn('Error in createComment: ', e)\r\n            })\r\n    }\r\n}\r\n\r\nexport function handleEditPost(id, edited) {\r\n    return dispatch => {\r\n        return editPost(id, edited)\r\n            .then(resp => dispatch(editPostAction(resp)))\r\n            .catch(e => {\r\n                console.warn('Error in editPost: ', e)\r\n            })\r\n    }\r\n}\r\n\r\nexport function handleEditComment(id, edited) {\r\n    console.log(edited)\r\n    return dispatch => {\r\n        return editComment(id, edited)\r\n            .then(resp => dispatch(editCommentAction(resp)))\r\n            .catch(e => {\r\n                console.warn('Error in editComment: ', e)\r\n            })\r\n    }\r\n}\r\n\r\nexport function handleDeletePost(id, ) {\r\n    return dispatch => {\r\n        return deletePost(id)\r\n            .then(resp => {\r\n                dispatch(deletePostAction(resp))\r\n            })\r\n            .catch(e => {\r\n                console.warn('Error in deletePost: ', e)\r\n            })\r\n    }\r\n}\r\n\r\nexport function handleDeleteComment(id) {\r\n    return dispatch => {\r\n        return deleteComment(id)\r\n            .then(resp => {\r\n                dispatch(deleteCommentAction(resp))\r\n            })\r\n            .catch(e => {\r\n                console.warn('Error in deleteComment: ', e)\r\n            })\r\n    }\r\n}\r\n\r\nexport function voteScorePostAction(id, vote) {\r\n    return (dispatch) => {\r\n        return voteScorePost(id, vote)\r\n            .then(resp => {\r\n                dispatch(toggleVoteScore(resp))\r\n                console.log(resp)\r\n            })\r\n            .catch((e) => {\r\n                console.warn('Error in voteScorePost: ', e)\r\n                alert('The was an error liking or deslinking the post. Try again')\r\n            })\r\n    }\r\n}\r\n\r\nexport function voteScoreCommentAction(id, vote) {\r\n    return (dispatch) => {\r\n        return voteScoreComment(id, vote)\r\n            .then(resp => {\r\n                dispatch(toggleVoteScoreComment(resp))\r\n                console.log(resp)\r\n            })\r\n            .catch((e) => {\r\n                console.warn('Error in voteScorePost: ', e)\r\n                alert('The was an error liking or deslinking the post. Try again')\r\n            })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { voteScorePostAction } from '../actions/shared'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\n\r\nclass PostsList extends Component {\r\n\r\n    state = {\r\n        upvote: 'upVote',\r\n        downvote: 'downVote',\r\n    }\r\n\r\n    handleLike = (id, vote) => {\r\n        const { dispatch } = this.props\r\n        dispatch(voteScorePostAction(id, vote))\r\n    }\r\n\r\n    handlePostDetails = (history, post) =>\r\n        history.push({\r\n            pathname: `/${post.category}/${post.id}`\r\n        })\r\n\r\n    render() {\r\n        const {\r\n            id,\r\n            title,\r\n            category,\r\n            author,\r\n            timestamp,\r\n            commentCount,\r\n            body,\r\n            voteScore,\r\n        } = this.props.post\r\n\r\n        const { post, history } = this.props\r\n        const { upvote, downvote } = this.state\r\n\r\n        return (\r\n            <div className=\"post1\">\r\n\r\n                <h1>{title}</h1>\r\n\r\n                <div className=\"cabecalho\">\r\n                    <div className=\"box-1\">{category}</div>\r\n                    <div className=\"box-2\">{author}</div>\r\n                    <div className=\"box-3\">{moment(timestamp).format('DD/MM/YYYY')}</div>\r\n                    <div className=\"box-4\"></div>\r\n                    <div className=\"contador\">{commentCount} comments</div>\r\n                </div>\r\n\r\n                <div className=\"conteudo-post\">\r\n                    <p>{body}</p>\r\n                </div>\r\n\r\n\r\n                <div\r\n                    className=\"botaoEnviar\"\r\n                    onClick={() => this.handlePostDetails(history, post)}\r\n                >\r\n                    CONTINUE LENDO\r\n                </div>\r\n\r\n                <div className=\"icons-post\">\r\n                    <div className=\"like-post\" onClick={() => this.handleLike(id, upvote)}></div>\r\n                    <div className=\"like-post-text\">{voteScore}</div>\r\n                    <div className=\"deslike-post\" onClick={() => this.handleLike(id, downvote)}></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ posts }, { id }) {\r\n    const post = posts[id]\r\n    return {\r\n        post\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PostsList)\r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Link\r\n            to=\"/\"\r\n        >\r\n            <div className=\"home\">\r\n                <h1><strong>Leitura</strong></h1>\r\n            </div>\r\n        </Link>\r\n    )\r\n};\r\n\r\nexport default Header\r\n\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport PostsList from './PostsList'\r\nimport Header from './Header'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  handleInitialData,\r\n  handleGetAllCategories,\r\n  handlePostsForCategory\r\n} from '../actions/shared'\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    categorySelected: 'all',\r\n    sort: 'voteScore',\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { dispatch } = this.props\r\n    dispatch(handleInitialData())\r\n    dispatch(handleGetAllCategories())\r\n  }\r\n\r\n  onClick = (categorySelected) => {\r\n    const { history, dispatch } = this.props\r\n\r\n    if (categorySelected !== 'all') {\r\n      dispatch(handlePostsForCategory(categorySelected))\r\n        .then(history.push(`${categorySelected}`))\r\n    }\r\n    else {\r\n      dispatch(handleInitialData())\r\n        .then(history.push(\"\"))\r\n    }\r\n    this.setState({ categorySelected })\r\n  }\r\n\r\n  onSortBy = (e) => {\r\n    this.setState({\r\n      sort: e.target.value,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { renderForVoteScore, renderForTimestamp, categories, history } = this.props;\r\n    const { sort } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"grid-posts\">\r\n          <div className=\"grid-posts-item1\">\r\n            {sort === 'voteScore' ?\r\n              renderForVoteScore.map((id) => (\r\n                <PostsList\r\n                  id={id}\r\n                  key={id}\r\n                  history={history}\r\n                />\r\n              ))\r\n              :\r\n              renderForTimestamp.map((id) => (\r\n                <PostsList\r\n                  id={id}\r\n                  key={id}\r\n                  history={history}\r\n                />\r\n              ))\r\n            }\r\n          </div>\r\n\r\n          <div className=\"grid-posts-item2\">\r\n            <div className=\"meconheca\">\r\n              <Link to=\"/newpost\"><div className=\"botaoEnviar\">NEW POST</div></Link>\r\n            </div>\r\n\r\n            <div className=\"categories\">\r\n              <h1>SORT BY </h1>\r\n              <select onChange={(e) => this.onSortBy(e)}>\r\n                <option value=\"voteScore\">Votes</option>\r\n                <option value=\"timestamp\">Date</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"atualizacoes\">\r\n              <h1>CATEGORIES</h1>\r\n              <ul>\r\n                <li>\r\n                  <Button\r\n                    onClick={() => { this.onClick('all'); }}\r\n                  >\r\n                    All categories\r\n                  </Button>\r\n                </li>\r\n                {categories.map(category => (\r\n                  <li key={category}>\r\n                    <Button\r\n                      onClick={() => { this.onClick(category); }}\r\n                    >\r\n                      {category}\r\n                    </Button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ posts, categories }) {\r\n  return {\r\n    posts,\r\n    renderForVoteScore: Object.keys(posts)\r\n      .sort((a, b) => posts[b].voteScore - posts[a].voteScore),\r\n    renderForTimestamp: Object.keys(posts)\r\n      .sort((a, b) => posts[b].timestamp - posts[a].timestamp),\r\n    categories: Object.values(categories).map(category => category.name)\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home)\r\n","import React, { Component } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport { connect } from 'react-redux'\r\nimport { postDetails, handleEditPost } from '../actions/shared'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Header from './Header'\r\n\r\nconst styles = theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit,\r\n        width: 200,\r\n    },\r\n    dense: {\r\n        marginTop: 19,\r\n    },\r\n    menu: {\r\n        width: 200,\r\n    },\r\n});\r\n\r\nclass UpdatePost extends Component {\r\n\r\n    state = {\r\n        postEdited: {\r\n            title: '',\r\n            body: '',\r\n        },\r\n        toHome: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.dispatch(postDetails(this.props.match.params.id)).then(mydata => {\r\n            this.setState({\r\n                postEdited: {\r\n                    title: mydata.title,\r\n                    body: mydata.body,\r\n                },\r\n            })\r\n        });\r\n    }\r\n\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            postEdited: {\r\n                ...this.state.postEdited,\r\n                [name]: event.target.value,\r\n            }\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { dispatch } = this.props\r\n        dispatch(handleEditPost(this.props.match.params.id, this.state.postEdited))\r\n\r\n        this.setState({ toHome: true })\r\n    }\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { title, body } = this.state.postEdited\r\n        const { toHome } = this.state\r\n\r\n        if (toHome === true) {\r\n            return <Redirect to='/' />\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div className=\"container-view\">\r\n                    <div className=\"item-main\">\r\n                        <div className=\"formulario\">\r\n                            <h1>Edit post</h1>\r\n                            <form\r\n                                className={classes.container}\r\n                                noValidate\r\n                                autoComplete=\"off\"\r\n                                onSubmit={e => this.handleSubmit(e)}\r\n                            >\r\n                                <TextField\r\n                                    required\r\n                                    id=\"title\"\r\n                                    value={title}\r\n                                    placeholder=\"Title\"\r\n                                    label=\"Title\"\r\n                                    type=\"text\"\r\n                                    onChange={this.handleChange('title')}\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                    helperText=\"Input the title of post\"\r\n                                />\r\n\r\n                                <TextField\r\n                                    required\r\n                                    id=\"body\"\r\n                                    value={body}\r\n                                    label=\"Body\"\r\n                                    type=\"text\"\r\n                                    onChange={this.handleChange('body')}\r\n                                    multiline\r\n                                    rowsMax=\"5\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                />\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ post }) {\r\n    return {\r\n        post,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withStyles(styles)(UpdatePost));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { get } from 'lodash'\r\nimport moment from 'moment';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    postComments,\r\n    AddComment,\r\n    handleDeleteComment,\r\n    voteScoreCommentAction,\r\n} from '../actions/shared'\r\n\r\nconst styles = theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit,\r\n        width: 200,\r\n    },\r\n    dense: {\r\n        marginTop: 19,\r\n    },\r\n    menu: {\r\n        width: 200,\r\n    },\r\n});\r\n\r\nclass CommentsList extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            comment: {\r\n                timestamp: Date.now(),\r\n                body: '',\r\n                author: '',\r\n            },\r\n        };\r\n    }\r\n\r\n    handleComments = () => {\r\n        const { post } = this.props\r\n        const commentsList = get(post, 'comments', []);\r\n        return commentsList\r\n    }\r\n\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            comment: {\r\n                ...this.state.comment,\r\n                [name]: event.target.value,\r\n            }\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { dispatch } = this.props\r\n        const { id } = this.props\r\n        dispatch(AddComment(id, this.state.comment))\r\n            .then(() => dispatch(postComments(id)))\r\n\r\n        this.setState({\r\n            comment: {\r\n                body: '',\r\n                author: '',\r\n            },\r\n        })\r\n    }\r\n\r\n\r\n    handleDelete = (id) => {\r\n        const { dispatch } = this.props\r\n        dispatch(handleDeleteComment(id))\r\n    }\r\n\r\n    handleLike = (id, vote) => {\r\n        const { dispatch } = this.props\r\n        dispatch(voteScoreCommentAction(id, vote))\r\n    }\r\n\r\n    render() {\r\n        const { classes, commentCount } = this.props\r\n        const { body, author } = this.state.comment\r\n        console.log(this.props)\r\n        return (\r\n            <div className=\"comments\">\r\n                <p>{commentCount} comments</p>\r\n                <div className=\"formulario\">\r\n                    <form\r\n                        className={classes.container}\r\n                        onSubmit={e => this.handleSubmit(e)}\r\n                        autoComplete=\"off\"\r\n                    >\r\n                        <TextField\r\n                            required\r\n                            id=\"author\"\r\n                            value={author}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            placeholder=\"Write your name\"\r\n                            label=\"Author\"\r\n                            type=\"text\"\r\n                            onChange={this.handleChange('author')}\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            required\r\n                            id=\"body\"\r\n                            value={body}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            placeholder=\"Write your comment\"\r\n                            label=\"Body\"\r\n                            type=\"text\"\r\n                            onChange={this.handleChange('body')}\r\n                            multiline\r\n                            rowsMax=\"5\"\r\n                            margin=\"normal\"\r\n                            fullWidth\r\n                        />\r\n\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            type=\"submit\"\r\n                        >\r\n                            Add comment\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n                {this.handleComments().map(comment => (\r\n                    <div className=\"container-comments\" key={comment.id}>\r\n                        <div className=\"author\">\r\n                            {comment.author}\r\n                        </div>\r\n                        <div className=\"date\">\r\n                            Commented at {moment(comment.timestamp).format('DD/MM/YYYY')}\r\n                        </div>\r\n                        <div className=\"comment-content\">\r\n                            {comment.body}\r\n                        </div>\r\n\r\n                        <Link to={`/edit-comment/${comment.id}`}><div id=\"edit-post\">EDIT</div></Link>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            className=\"remove-comment\"\r\n                            onClick={() => this.handleDelete(comment.id)}\r\n                        >\r\n                            REMOVE\r\n                        </Button>\r\n                        <div className=\"controls\">\r\n                            <div className=\"like-comment\" onClick={() => this.handleLike(comment.id, 'upVote')}></div>\r\n                            <div className=\"like-comment-text\">{comment.voteScore}</div>\r\n                            <div className=\"deslike-comment\" onClick={() => this.handleLike(comment.id, 'downVote')}></div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ post, comment }, { id, commentCount }) {\r\n    return {\r\n        post,\r\n        commentCount,\r\n        id,\r\n        comment\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withStyles(styles)(CommentsList))\r\n","import React from 'react';\r\nimport Header from './Header'\r\n\r\nconst Page404 = () => {\r\n  return (\r\n    <div>\r\n    <Header />\r\n      <div className=\"grid-posts\">\r\n        <div className=\"grid-posts-item1\">\r\n          This post doesn't exist\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page404\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\nimport {\r\n    postDetails,\r\n    postComments,\r\n    handleDeletePost,\r\n    voteScorePostAction,\r\n} from '../actions/shared'\r\nimport CommentsList from './CommentsList'\r\nimport Button from '@material-ui/core/Button'\r\nimport Page404 from './Page404';\r\nimport Header from './Header'\r\n\r\nclass PostDetails extends Component {\r\n    state = {\r\n        toHome: false,\r\n        havePost: ''\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const { dispatch } = this.props\r\n        const returnDetails = await dispatch(postDetails(this.props.match.params.id))\r\n        this.setState({\r\n            havePost: returnDetails.id\r\n        })\r\n        dispatch(postComments(this.props.match.params.id))\r\n    }\r\n\r\n    handleDelete = () => {\r\n        const { dispatch } = this.props\r\n        dispatch(handleDeletePost(this.props.match.params.id))\r\n        this.setState({\r\n            toHome: true\r\n        })\r\n    }\r\n\r\n    handleLike = (id, vote) => {\r\n        const { dispatch } = this.props\r\n        dispatch(voteScorePostAction(id, vote))\r\n    }\r\n\r\n    handleEdit = (history, post) =>\r\n        history.push({\r\n            pathname: `/edit-post/${post.id}`,\r\n        })\r\n\r\n    render() {\r\n        const { id, title, category, author, timestamp, voteScore, body, commentCount } = this.props.post\r\n        const { toHome, havePost } = this.state\r\n        const { post, history } = this.props\r\n\r\n        if (toHome === true) {\r\n            return <Redirect to='/' />\r\n        }\r\n        return (\r\n            <div>\r\n                {havePost === undefined ?\r\n                    <div>\r\n                        <Page404 />\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <Header />\r\n                        <div className=\"container-view\">\r\n                            <div className=\"item-main\">\r\n                                <h1>{title}</h1>\r\n                                <div className=\"cabecalho\">\r\n                                    <div className=\"box-1\">{category}</div>\r\n                                    <div className=\"box-2\">{author}</div>\r\n                                    <div className=\"box-3\">{moment(timestamp).format('DD/MM/YYYY')}</div>\r\n                                    <div className=\"icons\">\r\n                                        <div className=\"like-button\" onClick={() => this.handleLike(id, 'upVote')}></div>\r\n                                        <div className=\"like-button-text\">{voteScore}</div>\r\n                                        <div className=\"deslike-button\" onClick={() => this.handleLike(id, 'downVote')}></div>\r\n                                    </div>\r\n                                </div>\r\n                                <p>\r\n                                    {body}\r\n                                </p>\r\n                                <CommentsList\r\n                                    id={id}\r\n                                    commentCount={commentCount}\r\n                                />\r\n                            </div>\r\n                            <div className=\"item-sidebar\">\r\n                                <div\r\n                                    id=\"edit-post\"\r\n                                    onClick={() => this.handleEdit(history, post)}\r\n                                >\r\n                                    EDIT\r\n                                </div>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    type=\"submit\"\r\n                                    onClick={() => this.handleDelete()}\r\n                                >\r\n                                    REMOVE\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps({ post }) {\r\n    return {\r\n        post,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PostDetails)\r\n","import React, { Component } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Button from '@material-ui/core/Button'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport { addPost } from '../actions/shared'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Header from './Header'\r\n\r\nconst styles = theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit,\r\n        width: 200,\r\n    },\r\n    dense: {\r\n        marginTop: 19,\r\n    },\r\n    menu: {\r\n        width: 200,\r\n    },\r\n});\r\n\r\nconst categoriesList = [\r\n    {\r\n        id: 0,\r\n        title: 'React',\r\n        category: 'react',\r\n    },\r\n    {\r\n        id: 1,\r\n        title: 'Redux',\r\n        category: 'redux',\r\n    },\r\n    {\r\n        id: 2,\r\n        title: 'Udacity',\r\n        category: 'udacity',\r\n    },\r\n];\r\n\r\nclass NewPost extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            post: {\r\n                timestamp: Date.now(),\r\n                title: '',\r\n                body: '',\r\n                author: '',\r\n                category: '',\r\n            },\r\n            toHome: false,\r\n        };\r\n    }\r\n\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            post: {\r\n                ...this.state.post,\r\n                [name]: event.target.value,\r\n            }\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { dispatch, history } = this.props\r\n        dispatch(addPost(this.state.post)).then(history.push('/'));\r\n\r\n        this.setState({ toHome: true })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { classes } = this.props;\r\n        const { title, category, body, author } = this.state.post\r\n        const { toHome } = this.state\r\n\r\n        if (toHome === true) {\r\n            return <Redirect to='/' />\r\n        }\r\n\r\n        return (\r\n            <div>\r\n            <Header />\r\n                <div className=\"container-view\">\r\n                    <div className=\"item-main\">\r\n                        <div className=\"formulario\">\r\n                            <h1>Create new post</h1>\r\n                            <form\r\n                                className={classes.container}\r\n                                noValidate\r\n                                autoComplete=\"off\"\r\n                                onSubmit={e => this.handleSubmit(e)}\r\n                            >\r\n                                <TextField\r\n                                    required\r\n                                    id=\"title\"\r\n                                    value={title}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    placeholder=\"Input the title of post\"\r\n                                    label=\"Title\"\r\n                                    type=\"text\"\r\n                                    onChange={this.handleChange('title')}\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                />\r\n                                <TextField\r\n                                    required\r\n                                    id=\"category\"\r\n                                    select\r\n                                    label=\"Category\"\r\n                                    value={category}\r\n                                    onChange={this.handleChange('category')}\r\n                                    SelectProps={{\r\n                                        MenuProps: {\r\n                                            className: classes.menu,\r\n                                        },\r\n                                    }}\r\n                                    helperText=\"Please select your category\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                >\r\n                                    {categoriesList.map(option => (\r\n                                        <MenuItem\r\n                                            key={option.id}\r\n                                            value={option.category}\r\n                                        >\r\n                                            {option.title}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n\r\n                                <TextField\r\n                                    required\r\n                                    id=\"author\"\r\n                                    value={author}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    placeholder=\"Input the author of post\"\r\n                                    label=\"Author\"\r\n                                    type=\"text\"\r\n                                    onChange={this.handleChange('author')}\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                />\r\n\r\n                                <TextField\r\n                                    required\r\n                                    id=\"body\"\r\n                                    value={body}\r\n                                    placeholder=\"Input the content of post\"\r\n                                    label=\"Body\"\r\n                                    type=\"text\"\r\n                                    onChange={this.handleChange('body')}\r\n                                    multiline\r\n                                    rowsMax=\"5\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                />\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    Publish\r\n                                </Button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(withStyles(styles)(NewPost));\r\n","import React, { Component } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport { connect } from 'react-redux'\r\nimport { commentDetails, handleEditComment, postDetails } from '../actions/shared'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Header from './Header'\r\n\r\nconst styles = theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit,\r\n        width: 200,\r\n    },\r\n    dense: {\r\n        marginTop: 19,\r\n    },\r\n    menu: {\r\n        width: 200,\r\n    },\r\n});\r\n\r\nclass UpdateComment extends Component {\r\n\r\n    state = {\r\n        body: '',\r\n        backDetails: false,\r\n        category: '',\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { dispatch } = this.props\r\n        console.log(this.props)\r\n        dispatch(commentDetails(this.props.match.params.id))\r\n            .then(mydata => {\r\n                this.setState({\r\n                    body: mydata.body,\r\n                })\r\n            });\r\n    }\r\n\r\n    handleChange = name => event => {\r\n        this.setState({\r\n            ...this.state.body,\r\n            [name]: event.target.value,\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { dispatch } = this.props\r\n        dispatch(handleEditComment(this.props.match.params.id, this.state.body))\r\n        dispatch(postDetails(this.props.post.parentId)).then(mydata => {\r\n            this.setState({\r\n                category: mydata.category,\r\n                backDetails: true\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        const { backDetails, body, category } = this.state\r\n        console.log(this.props)\r\n        console.log(category)\r\n        const id = this.props.post.parentId\r\n\r\n        if (backDetails === true) {\r\n            return <Redirect to={`/${category}/${id}`} />\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <div className=\"container-view\">\r\n                    <div className=\"item-main\">\r\n                        <div className=\"formulario\">\r\n                            <h1>Edit comment</h1>\r\n                            <form\r\n                                className={classes.container}\r\n                                noValidate\r\n                                autoComplete=\"off\"\r\n                                onSubmit={e => this.handleSubmit(e)}\r\n                            >\r\n\r\n                                <TextField\r\n                                    required\r\n                                    id=\"body\"\r\n                                    value={body}\r\n                                    label=\"Body\"\r\n                                    type=\"text\"\r\n                                    onChange={this.handleChange('body')}\r\n                                    multiline\r\n                                    rowsMax=\"5\"\r\n                                    margin=\"normal\"\r\n                                    fullWidth\r\n                                />\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    type=\"submit\"\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ post, comment, category }, { id, commentCount }) {\r\n    return {\r\n        post,\r\n        commentCount,\r\n        id,\r\n        comment,\r\n        category\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withStyles(styles)(UpdateComment));\r\n","import React from 'react'\r\nimport Home from './Home'\r\nimport UpdatePost from './UpdatePost'\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport PostDetails from './PostDetails'\r\nimport NewPost from './NewPost'\r\nimport UpdateComment from './UpdateComment'\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n\r\n        <Route path=\"/edit-post/:id\" component={UpdatePost} />\r\n\r\n        <Route path=\"/edit-comment/:id\" component={UpdateComment} />\r\n\r\n        <Route path=\"/:category/:id\" component={PostDetails} />\r\n\r\n        <Route path=\"/newpost\" component={NewPost} />\r\n\r\n        <Route\r\n          path='/:category'\r\n          render={props => {\r\n            return <Home {...props} />\r\n          }}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default connect()(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport posts from './posts'\r\nimport post from './post'\r\nimport categories from './categories'\r\n\r\nexport default combineReducers({\r\n    posts,\r\n    post,\r\n    categories,\r\n})","import {\r\n    RECEIVE_POSTS,\r\n    NEW_POST,\r\n    DELETE_POST,\r\n    GET_POSTS_FOR_CATEGORY,\r\n    TOGGLE_VOTE_SCORE,\r\n} from \"../actions/posts\";\r\n\r\nexport default function posts(state = {}, action) {\r\n    switch (action.type) {\r\n        case RECEIVE_POSTS:\r\n            return action.posts\r\n        case NEW_POST:\r\n            return {\r\n                ...state,\r\n                [action.post.id]: action.post,\r\n            }\r\n        case DELETE_POST:\r\n            const postId = Object.keys(state).filter(item =>\r\n                state[item].id === action.post.id)\r\n            return {\r\n                ...state,\r\n                [postId]: {\r\n                    ...state[postId],\r\n                    deleted: true\r\n                }\r\n            }\r\n        case GET_POSTS_FOR_CATEGORY:\r\n            return {\r\n                ...action.posts,\r\n            }\r\n        case TOGGLE_VOTE_SCORE:\r\n            const postVotedId = Object.keys(state).filter(item =>\r\n                state[item].id === action.post.id)\r\n            return {\r\n                ...state,\r\n                [postVotedId]: {\r\n                    ...state[postVotedId],\r\n                    voteScore: action.post.voteScore\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    POST_DETAILS,\r\n    GET_POST_COMMENTS,\r\n    EDIT_POST,\r\n    NEW_COMMENT,\r\n    TOGGLE_VOTE_SCORE,\r\n    EDIT_COMMENT,\r\n    DELETE_COMMENT,\r\n    COMMENT_DETAILS,\r\n    TOGGLE_VOTE_SCORE_COMMENT,\r\n} from \"../actions/posts\";\r\n\r\nexport default function post(state = {}, action) {\r\n    switch (action.type) {\r\n        case POST_DETAILS:\r\n            return {\r\n                ...state,\r\n                ...action.post\r\n            }\r\n        case COMMENT_DETAILS:\r\n            return {\r\n                ...state,\r\n                ...action.comment\r\n            }\r\n        case GET_POST_COMMENTS:\r\n            const orderVote = action.comments.sort((a, b) => {\r\n                return b.voteScore - a.voteScore\r\n            })\r\n            return {\r\n                ...state,\r\n                comments: [\r\n                    ...orderVote,\r\n                ]\r\n            }\r\n        case EDIT_POST:\r\n            return action.post\r\n\r\n        case TOGGLE_VOTE_SCORE:\r\n            return {\r\n                ...state,\r\n                voteScore: action.post.voteScore,\r\n            }\r\n        case TOGGLE_VOTE_SCORE_COMMENT:\r\n            const { comment } = action;\r\n            const updatedComments = state.comments.map(item => (\r\n                item.id === comment.id ? comment : item\r\n            ));\r\n            return {\r\n                ...state,\r\n                comments: updatedComments,\r\n            }\r\n        case NEW_COMMENT:\r\n            return {\r\n                ...state,\r\n                commentCount: state.commentCount + 1,\r\n                comments: state.comments.concat(action.comment)\r\n            }\r\n        case EDIT_COMMENT:\r\n            return action.comment\r\n        case DELETE_COMMENT:\r\n            const { comments } = state;\r\n            let newComments = comments;\r\n\r\n            newComments.splice(\r\n                comments.findIndex(item => item.id === action.comment.id), 1\r\n            );\r\n            return {\r\n                ...state,\r\n                commentCount: state.commentCount - 1,\r\n                comments: newComments,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    GET_CATEGORIES\r\n} from \"../actions/posts\";\r\n\r\nexport default function categories (state={}, action){\r\n    switch(action.type){\r\n        case GET_CATEGORIES:\r\n            return{\r\n                ...state,\r\n                ...action.categories,\r\n            }\r\n        default:\r\n        return state;\r\n    }\r\n}","const logger = (store) => (next) => (action) => {\r\n    console.group(action.type)\r\n        console.log('The action: ', action)\r\n        const returnValue = next(action)\r\n        console.log('The new state ', store.getState())\r\n    console.groupEnd()\r\n    return returnValue\r\n}\r\n\r\nexport default logger","import thunk from 'redux-thunk'\r\nimport logger from './logger'\r\nimport { applyMiddleware } from 'redux'\r\n\r\nexport default applyMiddleware(\r\n    thunk,\r\n    logger,\r\n)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, compose } from 'redux';\r\nimport reducer from './reducers';\r\nimport { Provider } from 'react-redux';\r\nimport middleware from './middleware'\r\nimport './index.css'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    /* preloadedState, */ composeEnhancers(\r\n    middleware\r\n));\r\n\r\nReactDOM.render(<HashRouter>\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n</HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}